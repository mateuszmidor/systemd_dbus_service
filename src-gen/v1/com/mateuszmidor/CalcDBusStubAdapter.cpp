/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091512.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/mateuszmidor/Calc.hpp>
#include <v1/com/mateuszmidor/CalcDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace mateuszmidor {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createCalcDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<CalcDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerCalcDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Calc::getInterface(), &createCalcDBusStubAdapter);
}

CalcDBusStubAdapterInternal::~CalcDBusStubAdapterInternal() {
    deactivateManagedInstances();
    CalcDBusStubAdapterHelper::deinit();
}

void CalcDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* CalcDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"calculationDone\">\n"
            "<arg name=\"msg\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"add\">\n"
            "<arg name=\"_a\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_b\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"x\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::mateuszmidor::CalcStub,
        CommonAPI::Version
        > CalcDBusStubAdapterInternal::getCalcInterfaceVersionStubDispatcher(&CalcStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::mateuszmidor::CalcStub,
    std::tuple<int32_t, int32_t>,
    std::tuple<int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalcDBusStubAdapterInternal::addStubDispatcher(
    &CalcStub::add, "x",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));



void CalcDBusStubAdapterInternal::fireCalculationDoneEvent(const std::string& msg) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "calculationDone",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(msg, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}


const CalcDBusStubAdapterHelper::StubDispatcherTable& CalcDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& CalcDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

CalcDBusStubAdapterInternal::CalcDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      CalcDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<CalcStub>(_stub), false),
      stubDispatcherTable_({
            { { "add", "ii" }, &com::mateuszmidor::CalcDBusStubAdapterInternal::addStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::mateuszmidor::CalcDBusStubAdapterInternal::getCalcInterfaceVersionStubDispatcher });
}

bool CalcDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mateuszmidor
} // namespace com
} // namespace v1
