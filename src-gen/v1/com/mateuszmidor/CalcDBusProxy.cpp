/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091512.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/mateuszmidor/CalcDBusProxy.hpp>

namespace v1 {
namespace com {
namespace mateuszmidor {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCalcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CalcDBusProxy>(_address, _connection);
}

INITIALIZER(registerCalcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Calc::getInterface(),
		&createCalcDBusProxy);
}

CalcDBusProxy::CalcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		calculationDone_(*this, "calculationDone", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)))
{
}


CalcDBusProxy::CalculationDoneEvent& CalcDBusProxy::getCalculationDoneEvent() {
    return calculationDone_;
}
    
    void CalcDBusProxy::add(const int32_t &_a, const int32_t &_b, CommonAPI::CallStatus &_internalCallStatus, int64_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_a(_a, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_b(_b, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "add",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_a, deploy_b,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> CalcDBusProxy::addAsync(const int32_t &_a, const int32_t &_b, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_a(_a, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_b(_b, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "add",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_a, deploy_b,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void CalcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace mateuszmidor
      } // namespace com
      } // namespace v1
